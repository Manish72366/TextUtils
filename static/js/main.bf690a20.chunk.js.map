{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/About.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","changeBgColor","clr","document","body","style","backgroundColor","color","ele","getElementById","React","createElement","Fragment","className","concat","mode","Link","to","title","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","active","aria-current","onClick","aboutText","role","toggleMode","htmlFor","TextForm","_useState","useState","_useState2","_slicedToArray","text","setText","_useState3","_useState4","undo","setUndo","_useState5","_useState6","voices","setVoices","_useState7","_useState8","selectedVoice","setSelectedVoice","useEffect","window","speechSynthesis","onvoiceschanged","availableVoices","getVoices","heading","value","onChange","event","console","log","target","rows","disabled","split","filter","length","newText","toUpperCase","toLowerCase","showAlert","navigator","clipboard","writeText","getSelection","removeAllRanges","join","len","newText1","i","e","selectedVoiceIndex","map","voice","index","key","name","speech","SpeechSynthesisUtterance","speak","About","border","defaultProps","App","setMode","BrowserRouter","querySelector","href","Routes","Route","path","element","Navigate","exact","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode"],"mappings":"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","file":"static/js/main.bf690a20.chunk.js","sourcesContent":["\r\nimport React from 'react'\r\nimport PropTypes from 'prop-types';\r\nimport { Link } from 'react-router-dom';\r\nexport default function Navbar(props) {\r\n  const setFavbarHome = () =>\r\n  {\r\n    document.title = \"TextUtils-Home\";\r\n  };\r\n  const setFavbarAbout = () =>\r\n  {\r\n    document.title = \"TextUtils-About\";\r\n  };\r\n  // Harry bhai did this with the use of bootstrap  bg class bg-primary and all those thing.\r\n  // he used document.body.classList.add('bg-' + cls) and document.body.classList.remove('bg-success') etc he removes it bcz if one set to be the background so other won't allowed\r\n  const changeBgColor =  (clr) =>\r\n  {\r\n    document.body.style.backgroundColor = clr;\r\n    document.body.style.color = 'white';\r\n    let ele = document.getElementById('MyBox');\r\n    ele.style.backgroundColor = clr;\r\n    ele.style.color = 'white';\r\n    // i am trying to replicate the same thing for about also but if you look to the about code so inside the html we are changing the color so that will replicate things. \r\n    // let ele1 = document.getElementsByClassName('abt');\r\n    // ele1.style.backgroundColor = clr;\r\n    // ele1.style.color = 'white';\r\n  };\r\n  const changeBgColorRed =  () =>\r\n  {\r\n    changeBgColor(\"red\");\r\n  };\r\n  const changeBgColorGreen =  () =>\r\n  {\r\n    changeBgColor(\"green\");\r\n  };\r\n  const changeBgColorPurple =  () =>\r\n  {\r\n    changeBgColor(\"blueviolet\");\r\n  };\r\n  const changeBgColorBlue =  () =>\r\n  {\r\n    changeBgColor(\"blue\");\r\n  };\r\n  \r\n  return (\r\n    <>\r\n    <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}> {/* Curly bracket and then backticks helps us to use  template literal inside the whole string ${} use to write js things inside */}\r\n    <div className=\"container-fluid\">\r\n      <Link className=\"navbar-brand\" to=\"/\">{props.title}</Link>\r\n      <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n        <span className=\"navbar-toggler-icon\"></span>\r\n      </button>\r\n      <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n        <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n          <li className=\"nav-item\">\r\n            <Link className={`nav-link ${props.active}`} aria-current=\"page\" to=\"/\" onClick={setFavbarHome}>Home</Link> {/* remove active className bcz usse hamesa hi home active rhta tha*/}\r\n          </li>\r\n          <li className=\"nav-item\">\r\n            <Link className={`nav-link ${props.active}`} to=\"/about\" onClick={setFavbarAbout}>{props.aboutText}</Link> {/* href = \"/\" means link to the same page where you are */}\r\n          </li>\r\n        </ul>\r\n        {/* <button className='btns' id = \"red\" onClick={changeBgColor('red')} >red</button> this set the color to red without clicking to it so use function to overcome the problem , simple onClick ko ek function chayiye hota hai function call ni*/}\r\n        {/* <button className='btns' id = \"red\" onClick={changeBgColorRed} ></button> */}\r\n        <button className='btns' id = \"red\" onClick={() => {changeBgColor('red')}} ></button> {/* By this way you can directly send to the function*/}\r\n        <button className='btns' id = \"green\" onClick={changeBgColorGreen}></button>\r\n        <button className='btns' id = \"purple\" onClick={changeBgColorPurple}></button>\r\n        <button className='btns' id = \"blue\" onClick={changeBgColorBlue}></button>\r\n      \r\n     \r\n        <div className={`form-check form-switch text-${props.mode === 'dark' ? 'light' : 'dark'}`}> {/* text-light to do text color white*/}\r\n          <input className=\"form-check-input\" type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\" onClick={props.toggleMode} />\r\n          <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\" >Enable {props.mode === 'light' ? 'dark' : 'light'} Mode</label>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </nav>\r\n  </>\r\n  )\r\n}\r\n\r\n// To define what are the data types of props you are going to send if that are been different than assigned so show an error in console . other wise error won't show in console.  so glti pakdi jaaye we defined this.\r\nNavbar.propTypes = {\r\n    title : PropTypes.string,\r\n    // title : PropTypes.string.isRequired, means if you forget to send the title so it will show you an error in console.\r\n    aboutText : PropTypes.string.isRequired\r\n};\r\n\r\nNavbar.defaultProps = {\r\n     title : \"Set krna bhai title\",\r\n     aboutText : \"About\"\r\n}","import React, { useState  , useEffect} from \"react\"; // use state is a hook search react hook for more info\r\n// Text is a state variable.\r\nexport default function TextForm(props) {\r\n  const [text, setText] = useState(\"\");\r\n  const [undo, setUndo] = useState(\"Undo\");\r\n  const [voices, setVoices] = useState([]);\r\n  const [selectedVoice, setSelectedVoice] = useState(null);\r\n  useEffect(() => {\r\n    // Fetch available voices when the component mounts\r\n    window.speechSynthesis.onvoiceschanged = () => {\r\n      const availableVoices = window.speechSynthesis.getVoices();\r\n      setVoices(availableVoices);\r\n      setSelectedVoice(availableVoices[0]); // Select the first voice by default\r\n    };\r\n  }, []);\r\n  const handleUpClick = () => {\r\n    console.log(\"Uppercase was clicked\");\r\n    let newText = text.toUpperCase();\r\n    setText(newText);\r\n    setUndo(newText);\r\n  };\r\n  const handleLowClick = () => {\r\n    console.log(\"Lowercase was clicked\");\r\n    let newText = text.toLowerCase();\r\n    setText(newText);\r\n    setUndo(newText);\r\n  };\r\n  const Delete = () => {\r\n    console.log(\"Delete\");\r\n    setUndo(text);\r\n    setText(\"\");\r\n    props.showAlert(\"Deleted , want to Undo ?\" , \"danger\");\r\n  };\r\n  const handleExtraSpace = () => {\r\n    let newText = text.split(/[ ]+/); \r\n    setText(newText.join(\" \")); \r\n  };\r\n  const Undo = () => {\r\n    console.log(\"Undo\");\r\n    setText(undo);\r\n  };\r\n\r\n  const Alternate = () => {\r\n    let len = text.length;\r\n    let newText1 = \"\";\r\n    for(let i = 0 ; i < len ; i++)\r\n    {\r\n        if(i% 2 === 0)\r\n        {\r\n          newText1 += text[i].toLowerCase();\r\n        }\r\n        else{\r\n          newText1 += text[i].toUpperCase();\r\n        }\r\n    }\r\n    setText(newText1);\r\n  };\r\n  const Reverse = () => {\r\n    let len = text.length;\r\n    let newText = \"\";\r\n    for (let i = len - 1 ; i >= 0 ;i--)\r\n    {\r\n        newText += text[i];\r\n    }\r\n    setText(newText);\r\n  };\r\n  function setColor() {\r\n    let x = document.body;\r\n    x.style.backgroundColor = x.style.backgroundColor === \"yellow\" ? \"pink\" : \"yellow\";\r\n  }\r\n  \r\n  const handleCopy = () =>\r\n  {\r\n    setUndo(text);\r\n    navigator.clipboard.writeText(text);  // we have to method writeText and readText inside this.\r\n    document.getSelection().removeAllRanges(); // wo jo copy krke blue blue ni ata text pe toh usse hatane ke liye\r\n    props.showAlert(\"Copy to Clipboard\" , \"success\");\r\n  }\r\n  const handleCut = () =>\r\n  {\r\n    navigator.clipboard.writeText(text);\r\n    setUndo(text);\r\n    setText(\"\");\r\n  }\r\n  \r\n  const handleSpeak = () => {\r\n    if (selectedVoice) {\r\n      const speech = new SpeechSynthesisUtterance(text);\r\n      speech.voice = selectedVoice;\r\n      window.speechSynthesis.speak(speech);\r\n    }\r\n  };\r\n  const handlePaste = () =>\r\n  {\r\n     setText(text + \" \" + undo);\r\n  }\r\n  // event which has been happen\r\n  const handleOnChange = (event) => {\r\n    console.log(\"Onchange function run\");\r\n    setText(event.target.value);\r\n  };\r\n  \r\n  \r\n  return (\r\n    <>\r\n      <div className=\"container\">\r\n        <h1>{props.heading}</h1>\r\n        <div className=\"mb-3\">\r\n          <textarea className=\"form-control\" value={text} onChange={handleOnChange} style = {{backgroundColor : props.mode === 'dark'? 'rgb(3 ,2, 37)' : 'white' , color : props.mode === 'dark'? 'white': 'rgb(3 ,2, 37)'}} id=\"MyBox\" rows=\"8\" ></textarea> \r\n        </div>\r\n        <button disabled = {text.split(\" \").filter((ele) =>{return ele.length !== 0}).length === 0} className=\"btn btn-primary mx-2 my-2\" onClick={handleUpClick}> Convert to Uppercase </button>\r\n        <button disabled = {text.split(\" \").filter((ele) =>{return ele.length !== 0}).length === 0} className=\"btn btn-primary mx-2 my-2\" onClick={handleLowClick}>Convert to LowerCase </button>\r\n        <button disabled = {text.length === 0} className=\"btn btn-primary mx-2 my-2\" onClick={Delete}> Delete </button>\r\n        <button className=\"btn btn-primary mx-2 my-2\" onClick={Undo}> Undo </button>\r\n        <button disabled = {text.split(\" \").filter((ele) =>{return ele.length !== 0}).length === 0} className=\"btn btn-primary mx-2 my-2\" onClick={handleCopy}> Copy  </button>\r\n        <button disabled = {text.split(\" \").filter((ele) =>{return ele.length !== 0}).length === 0} className=\"btn btn-primary mx-2 my-2\" onClick={handleCut}> Cut </button>\r\n        <button  className=\"btn btn-primary mx-2 my-2\" onClick={handlePaste}> Paste </button>\r\n        <button disabled = {text.split(\" \").filter((ele) =>{return ele.length !== 0}).length === 0} className=\"btn btn-primary mx-2 my-2\" onClick={handleExtraSpace}>Remove Extra Space</button>\r\n        <button disabled = {text.split(\" \").filter((ele) =>{return ele.length !== 0}).length === 0} className=\"btn btn-primary mx-2 my-2\" onClick={Alternate}>bade chote</button>\r\n        <button disabled = {text.split(\" \").filter((ele) =>{return ele.length !== 0}).length === 0} className=\"btn btn-primary mx-2 my-2\" onClick={Reverse}>Reverse</button>\r\n        <select onChange={(e) => {\r\n            const selectedVoiceIndex = e.target.value;\r\n            setSelectedVoice(voices[selectedVoiceIndex]);\r\n          }}\r\n        >\r\n          {voices.map((voice, index) => (\r\n            <option key={index} value={index}>\r\n              {voice.name}\r\n            </option>\r\n          ))}\r\n        </select>\r\n        <button\r\n          disabled={text.split(\" \").filter((ele) => ele.length !== 0).length === 0}\r\n          className=\"btn btn-primary mx-2 my-2\"\r\n          id=\"spk\"\r\n          onClick={handleSpeak}\r\n        >\r\n          Speak\r\n        </button>\r\n        \r\n        \r\n      </div>\r\n      <div className=\"container my-3\">\r\n        \r\n        <h2>Your text summary </h2>\r\n        <p><b>{text.split(/\\s+/).filter((ele) => {return ele.length !== 0}).length}</b> words and <b>{text.length}</b> characters</p>\r\n        <p>{0.008 * (text.split(/\\s+/).filter((ele) => {return ele.length !== 0}).length)} Minutes read</p> \r\n        <h3>Preview</h3>\r\n        <p><b>{text}</b></p>\r\n      </div>\r\n\r\n    </>\r\n  );\r\n}\r\n","import React ,{ useState }  from \"react\";\r\nexport default function About(props) {\r\n    // making a state object so mode is an object here have more functionallity\r\n    const [mode1 , setMode] = useState(\r\n        {\r\n            color : 'black',\r\n            backgroundColor : 'white'\r\n        }\r\n    )\r\n    const [btn , setbtn] = useState(\"Dark Mode\");\r\n    const handleMode = () =>\r\n    {\r\n         if (mode1.color === 'white')\r\n         {\r\n           setMode({\r\n            color : 'black',\r\n            backgroundColor : 'white'\r\n           })\r\n           setbtn(\"Dark Mode\")\r\n         }\r\n         else \r\n         {\r\n           setMode({\r\n            color : 'white',\r\n            backgroundColor : 'black'\r\n           })\r\n           setbtn(\"Light Mode\");\r\n         }\r\n    }\r\n  return (\r\n    <>\r\n      <div className=\"container my-3 abt\" style = {{backgroundColor : props.mode === 'dark'? 'rgb(3 ,2, 37)' : 'white' , color : props.mode === 'dark'? 'white': 'rgb(3 ,2, 37)' }}>\r\n        <h1 style = {{backgroundColor : props.mode === 'dark'? 'rgb(3 ,2, 37)' : 'white' , color : props.mode === 'dark'? 'white': 'rgb(3 ,2, 37)'}}>About Us</h1>\r\n        <div className=\"accordion\" id=\"accordionPanelsStayOpenExample\">\r\n          <div className=\"accordion-item\">\r\n            <h2 className=\"accordion-header\">\r\n              <button\r\n                className=\"accordion-button\"\r\n                type=\"button\"\r\n                data-bs-toggle=\"collapse\"\r\n                data-bs-target=\"#panelsStayOpen-collapseOne\"\r\n                aria-expanded=\"true\"\r\n                aria-controls=\"panelsStayOpen-collapseOne\"\r\n                style = {{backgroundColor : props.mode === 'dark'? 'rgb(3 ,2, 37)' : 'white' , color : props.mode === 'dark'? 'white': 'rgb(3 ,2, 37)' ,  border : props.mode === 'dark'? '1px solid white' : '1px solid black'}}\r\n              >\r\n               <b>Accordion Item #1</b> \r\n              </button>\r\n            </h2>\r\n            <div\r\n              id=\"panelsStayOpen-collapseOne\"\r\n              className=\"accordion-collapse collapse show\"\r\n            >\r\n              <div className=\"accordion-body\" style = {{backgroundColor : props.mode === 'dark'? 'rgb(3 ,2, 37)' : 'white' , color : props.mode === 'dark'? 'white': 'rgb(3 ,2, 37)' }}>\r\n                <strong>This is the first item's accordion body.</strong> It is\r\n                shown by default, until the collapse plugin adds the appropriate\r\n                classNamees that we use to style each element. These classNamees control\r\n                the overall appearance, as well as the showing and hiding via\r\n                CSS transitions. You can modify any of this with custom CSS or\r\n                overriding our default variables. It's also worth noting that\r\n                just about any HTML can go within the{\" \"}\r\n                <code>.accordion-body</code>, though the transition does limit\r\n                overflow.\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"accordion-item\">\r\n            <h2 className=\"accordion-header\">\r\n              <button\r\n                className=\"accordion-button collapsed\"\r\n                type=\"button\"\r\n                data-bs-toggle=\"collapse\"\r\n                data-bs-target=\"#panelsStayOpen-collapseTwo\"\r\n                aria-expanded=\"false\"\r\n                aria-controls=\"panelsStayOpen-collapseTwo\"\r\n                style = {{backgroundColor : props.mode === 'dark'? 'rgb(3 ,2, 37)' : 'white' , color : props.mode === 'dark'? 'white': 'rgb(3 ,2, 37)' ,  border : props.mode === 'dark'? '1px solid white' : '1px solid black'}}\r\n              >\r\n                <b>Accordion Item #2</b>\r\n              </button>\r\n            </h2>\r\n            <div\r\n              id=\"panelsStayOpen-collapseTwo\"\r\n              className=\"accordion-collapse collapse\"\r\n            >\r\n              <div className=\"accordion-body\" style = {{backgroundColor : props.mode === 'dark'? 'rgb(3 ,2, 37)' : 'white' , color : props.mode === 'dark'? 'white': 'rgb(3 ,2, 37)' }}>\r\n                <strong>This is the second item's accordion body.</strong> It is\r\n                hidden by default, until the collapse plugin adds the\r\n                appropriate classNamees that we use to style each element. These\r\n                classNamees control the overall appearance, as well as the showing\r\n                and hiding via CSS transitions. You can modify any of this with\r\n                custom CSS or overriding our default variables. It's also worth\r\n                noting that just about any HTML can go within the{\" \"}\r\n                <code>.accordion-body</code>, though the transition does limit\r\n                overflow.\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"accordion-item\">\r\n            <h2 className=\"accordion-header\">\r\n              <button\r\n                className=\"accordion-button collapsed\"\r\n                type=\"button\"\r\n                data-bs-toggle=\"collapse\"\r\n                data-bs-target=\"#panelsStayOpen-collapseThree\"\r\n                aria-expanded=\"false\"\r\n                aria-controls=\"panelsStayOpen-collapseThree\"\r\n                style = {{backgroundColor : props.mode === 'dark'? 'rgb(3 ,2, 37)' : 'white' , color : props.mode === 'dark'? 'white': 'rgb(3 ,2, 37)' , border : props.mode === 'dark'? '1px solid white' : '1px solid black' }}\r\n              >\r\n                <b>Accordion Item #3</b>\r\n              </button>\r\n            </h2>\r\n            <div\r\n              id=\"panelsStayOpen-collapseThree\"\r\n              className=\"accordion-collapse collapse\"\r\n            >\r\n              <div className=\"accordion-body\" style = {{backgroundColor : props.mode === 'dark'? 'rgb(3 ,2, 37)' : 'white' , color : props.mode === 'dark'? 'white': 'rgb(3 ,2, 37)'}}>\r\n                <strong>This is the third item's accordion body.</strong> It is\r\n                hidden by default, until the collapse plugin adds the\r\n                appropriate classNamees that we use to style each element. These\r\n                classNamees control the overall appearance, as well as the showing\r\n                and hiding via CSS transitions. You can modify any of this with\r\n                custom CSS or overriding our default variables. It's also worth\r\n                noting that just about any HTML can go within the{\" \"}\r\n                <code>.accordion-body</code>, though the transition does limit\r\n                overflow.\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        \r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","import \"./App.css\";\nimport \"./manish.css\";\nimport React , { useState } from \"react\";\nimport Navbar from \"./components/Navbar\";\nimport TextForm from \"./components/TextForm\";\nimport About from \"./components/About\";\n// go to react router and from there you can see this code  and put here.\nimport {\n  BrowserRouter,\n  Routes,\n  Route,\n  Navigate,\n} from \"react-router-dom\"\n\nfunction App() {\n  const [mode , setMode] = useState('light');\n  const [alert , setAlert] = useState(null);\n  const showAlert = (message , type) =>\n  {\n    setAlert({\n      msg : message,\n      type : type\n    })\n    \n    setTimeout(() => {\n      setAlert(null);\n    }, 1500);\n  }\n  const toggleMode = () =>\n  {\n    if(mode === 'dark')\n    {\n      setMode('light');\n      document.body.style.backgroundColor = 'white'; // whole body have backgroun white\n      document.body.style.color = 'black'; // whole body text color = black\n      let ele = document.getElementById('MyBox');// MyBox id element is in TextForm.js \n      ele.style.backgroundColor ='white'; // applying backgroun color to the TextForm\n      // showAlert(\"Light mode has been successfully enabled\" , \"success\");\n      document.title = \"TextUtils-LightMode\"; // changing the text aside the favicon\n      var link = document.querySelector(\"link[rel*='icon']\"); // changing the favicon in light mode.\n      link.href = 'light.png';\n      // Below is the code for changing text title in a interval to attract the user bad experience\n      // setInterval(() => {\n      //   document.title = \"Install It Fast\";\n      // }, 600);\n      // setInterval(() => {\n      //   document.title = \"Bhai jldi\";\n      // }, 500);\n    }\n    else\n    {\n      setMode('dark');\n      document.body.style.backgroundColor = 'rgb(3 ,2, 37)';\n      document.body.style.color = 'white';\n      let ele = document.getElementById('MyBox');\n      ele.style.backgroundColor ='rgb(3,2,37)';\n      // showAlert(\"Dark mode has been successfully enabled\" , \"success\");\n      document.title = \"TextUtils-DarkMode\";\n      var link = document.querySelector(\"link[rel*='icon']\");\n      link.href = 'dark.png';\n    }\n  }\n  return (\n\n    <>\n     <BrowserRouter>\n      <Navbar title=\"textUtils\" aboutText=\"About\" mode = {mode} toggleMode = {toggleMode}/>\n      {/* <TextForm heading=\"Enter the text to analyze below\" mode = {mode} /> */}\n      {/* <Alert alert = {alert}/> */}\n      <div className=\"container my-7\" >\n        {/* this we took from react router  */}\n        {/* meaning of this that we click on home about and so on so how we switch to those pages */}\n        {/* exact path matches exact path and simply write path matches partially so always write exact */}\n        {/*react  router used to switch in pages without loading page as single page experience it gaves to us*/}\n        <Routes>   \n          <Route path=\"*\" element={<Navigate to=\"/home\"/>} /> {/* making home as default page */}\n          <Route exact path=\"/about\" element={<About mode = {mode} active = \"true\" />} />\n          <Route exact path=\"/\" element={<TextForm heading=\"Enter the text to analyze below\" mode = {mode} active = \"true\"/>} />\n        </Routes>\n      </div>\n      </BrowserRouter>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));// This will take element from index.html as that is DOM.\nroot.render( // same work as putting something inside the innner HTML.\n//This will help you to not do any casuality in your js which can cause a big error in the file \n   <React.StrictMode> \n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals(); // Fix poor user experiences on your site. The Core Web Vitals report shows how your pages perform, based on real world usage data (sometimes called field data). You can read more about this initiative on the Google Search Central blog.\n"],"sourceRoot":""}